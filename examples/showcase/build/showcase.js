(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VirtualKeyboard = (function () {
	function VirtualKeyboard(synthesizer) {
		var _this = this;

		_classCallCheck(this, VirtualKeyboard);

		this.synthesizer = synthesizer;

		this.keyState = [];
		for (var i = 0; i < 88; i++) {
			this.keyState[i] = false;
		}

		var lowerKeys = [67, 70, 86, 71, 66, 78, 74, 77, 75, 188, 76, 190, 191];
		var upperKeys = [69, 52, 82, 53, 84, 89, 55, 85, 56, 73, 57, 79, 80];

		this.key2note = {};

		for (var i = 0; i < lowerKeys.length; i++) {
			this.key2note[lowerKeys[i]] = 60 + i;
		}
		for (var i = 0; i < upperKeys.length; i++) {
			this.key2note[upperKeys[i]] = 72 + i;
		}

		document.body.addEventListener("keydown", function (event) {
			return _this.onKeyDown(event);
		});
		document.body.addEventListener("keyup", function (evemt) {
			return _this.onKeyUp(event);
		});

		this.damperPedal = false;

		this.createKeyboard();
	}

	_createClass(VirtualKeyboard, [{
		key: "onKeyDown",
		value: function onKeyDown(event) {
			if (event.target.nodeName === "INPUT" || event.target.nodeName === "TEXTAREA") {
				return;
			}

			if (event.keyCode === 32 && this.damperPedal === false) {
				this.damperPedal = true;
				this.synthesizer.processMIDIMessage([0xb0, 64, 127]);
			}

			var note = this.key2note[event.keyCode];
			if (this.keyState[note] === false) {
				this.keyState[note] = true;
				this.noteOn(note);
			}
		}
	}, {
		key: "onKeyUp",
		value: function onKeyUp(event) {
			if (event.keyCode === 32) {
				this.damperPedal = false;
				this.synthesizer.processMIDIMessage([0xb0, 64, 0]);
			}

			var note = this.key2note[event.keyCode];
			if (this.keyState[note] === true) {
				this.keyState[note] = false;
				this.noteOff(note);
			}
		}
	}, {
		key: "noteOn",
		value: function noteOn(note) {
			var velocity = arguments.length <= 1 || arguments[1] === undefined ? 96 : arguments[1];

			this.synthesizer.processMIDIMessage([0x90, note, velocity]);
		}
	}, {
		key: "noteOff",
		value: function noteOff(note) {
			this.synthesizer.processMIDIMessage([0x80, note, 0]);
		}
	}, {
		key: "createKeyboard",
		value: function createKeyboard() {
			var KEY_LENGTH = 120;

			var parent = document.getElementById("keyboard");

			var canvas = document.createElement("canvas");
			canvas.setAttribute("width", "1000");
			canvas.setAttribute("height", "" + KEY_LENGTH);
			parent.appendChild(canvas);

			var KEYS = [{ dx: 0.4, black: false }, // C
			{ dx: 0.6, black: true }, // C#
			{ dx: 0.6, black: false }, // D
			{ dx: 0.4, black: true }, // D#
			{ dx: 1.0, black: false }, // E
			{ dx: 0.35, black: false }, // F
			{ dx: 0.65, black: true }, // F#
			{ dx: 0.5, black: false }, // G
			{ dx: 0.5, black: true }, // G#
			{ dx: 0.65, black: false }, // A
			{ dx: 0.35, black: true }, // A#
			{ dx: 1.0, black: false } // B
			];

			var wholeToneInterval = 28; // pixel

			var context = canvas.getContext("2d");

			var LOWEST_NOTE = 21;
			var HIGHEST_NOTE = 21 + 88;
			var START_KEY = 9;

			// draw white keys
			var x = 0.5;
			var key = START_KEY;

			for (var note = LOWEST_NOTE; note < HIGHEST_NOTE; note++) {
				if (!KEYS[key].black) {
					var center = x * wholeToneInterval;
					var width = wholeToneInterval;
					var height = KEY_LENGTH;

					context.fillStyle = "#F8F8F8";
					context.fillRect(center - width / 2, 0, width, height);

					context.lineWidth = 0.5;
					context.strokeStyle = "#CCC";
					context.beginPath();
					context.moveTo(center - width / 2 - 0.5, 0);
					context.lineTo(center - width / 2 - 0.5, KEY_LENGTH);
					context.stroke();
				}

				x += KEYS[key].dx;
				if (++key >= KEYS.length) {
					key = 0;
				}
			}

			// draw black keys
			x = 0.5;
			key = START_KEY;

			for (var note = LOWEST_NOTE; note < HIGHEST_NOTE; note++) {
				if (KEYS[key].black) {
					var center = x * wholeToneInterval;
					var width = wholeToneInterval * 0.5;
					var height = KEY_LENGTH * 0.625;

					context.fillStyle = "#333";
					context.fillRect(center - width / 2, 0, width, height);
				}

				x += KEYS[key].dx;
				if (++key >= KEYS.length) {
					key = 0;
				}
			}
		}
	}]);

	return VirtualKeyboard;
})();

exports["default"] = VirtualKeyboard;
module.exports = exports["default"];

},{}],2:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _srcFramesynthesisDebug = require("../../../src/framesynthesis/Debug");

var _srcFramesynthesisDebug2 = _interopRequireDefault(_srcFramesynthesisDebug);

var _VirtualKeyboard = require("./VirtualKeyboard");

var _VirtualKeyboard2 = _interopRequireDefault(_VirtualKeyboard);

var synthesizer = new synthesisjs.Synthesizer({ verbose: true });

var virtualKeyboard = new _VirtualKeyboard2["default"](synthesizer);

_srcFramesynthesisDebug2["default"].log("Initializing Web MIDI");
if (navigator.requestMIDIAccess) {
	navigator.requestMIDIAccess().then(onMIDISuccess, onMIDIFailure);
} else {
	_srcFramesynthesisDebug2["default"].log("error: This browser does not support Web MIDI API.");
}

function onMIDISuccess(midiAccess) {
	for (var input of midiAccess.inputs.values()) {
		_srcFramesynthesisDebug2["default"].log("  MIDI Input  id: " + input.id + " manufacturer: " + input.manufacturer + " name: " + input.name);

		input.onmidimessage = onMIDIMessage;
	}

	for (var output of midiAccess.outputs.values()) {
		_srcFramesynthesisDebug2["default"].log("  MIDI Output id: " + output.id + " manufacturer: " + output.manufacturer + " name: " + output.name);
	}

	_srcFramesynthesisDebug2["default"].log("Ready");
}

function onMIDIFailure(message) {
	_srcFramesynthesisDebug2["default"].log("error: Can't initialize Web MIDI: " + message);
}

function onMIDIMessage(event) {
	// let s = "MIDI message timestamp " + event.timeStamp + " : ";
	// for (let i = 0; i < event.data.length; i++) {
	// 	s += "0x" + event.data[i].toString(16) + " ";
	// }

	synthesizer.processMIDIMessage(event.data);
}

var smfPlayer = new synthesisjs.SMFPlayer(synthesizer);

function playSMF() {
	_srcFramesynthesisDebug2["default"].log("Play test SMF");

	var tick = 24;

	var smf = new Uint8Array([0x4d, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x30, 0x4d, 0x54, 0x72, 0x6b, 0x00, 0x00, 0x00, 46, 0, 0xff, 0x51, 0x03, 0x07, 0xa1, 0x20, 0, 0x9f, 60, 96, tick, 0x8f, 60, 0, 0, 0x9f, 62, 96, tick, 0x8f, 62, 0, 0, 0x9f, 64, 96, tick, 0x8f, 64, 0, 0, 0x9f, 65, 96, tick, 0x8f, 65, 0, 0, 0x9f, 67, 96, tick, 0x8f, 67, 0]);

	smfPlayer.play(smf);
}

function stopSMF() {
	_srcFramesynthesisDebug2["default"].log("Stop SMF");

	smfPlayer.stop();

	for (var i = 0; i < 16; i++) {
		synthesizer.processMIDIMessage([0xb0 + i, 123, 0]);
	}
}

// export
window.playSMF = playSMF;
window.stopSMF = stopSMF;

function playMML() {
	var mml2smf = new synthesisjs.MML2SMF();
	var mml = document.getElementById("mml").value;
	_srcFramesynthesisDebug2["default"].log("Convert MML: " + mml);
	try {
		var smf = mml2smf.convert(mml);
		var startTick = mml2smf.getStartTick();
		_srcFramesynthesisDebug2["default"].log("Play SMF");
		smfPlayer.play(smf, startTick);
	} catch (e) {
		_srcFramesynthesisDebug2["default"].log(e.message);
	}
}

function tweetMML() {
	var mml = document.getElementById("mml").value;
	var mmlURL = "http://framesynthesis.com/experiments/synthesis.js/?mml=" + encodeURIComponent(mml);

	var url = "https://twitter.com/intent/tweet?hashtags=synthesisjs&text=" + encodeURIComponent(mmlURL);
	window.open(url, "_blank");
}

window.playMML = playMML;
window.tweetMML = tweetMML;

function synthesizerReset() {
	synthesizer.reset();
}

window.synthesizerReset = synthesizerReset;

// set MML from query string
if (location.search.startsWith("?mml=")) {
	var mml = decodeURIComponent(location.search.substring(5));
	document.getElementById("mml").value = mml;
}
/*{ sysex: true }*/

},{"../../../src/framesynthesis/Debug":3,"./VirtualKeyboard":1}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Debug = (function () {
	function Debug() {
		_classCallCheck(this, Debug);
	}

	_createClass(Debug, null, [{
		key: "clear",
		value: function clear() {
			if (typeof document === "undefined") {
				return;
			}

			document.getElementById("debug").innerHTML = "";
		}
	}, {
		key: "log",
		value: function log(message) {
			if (typeof document === "undefined") {
				return;
			}

			var element = document.getElementById("debug");
			if (element) {
				var div = document.createElement("div");
				var text = document.createTextNode(message);
				div.appendChild(text);

				element.appendChild(div);
				while (element.scrollHeight > element.clientHeight) {
					element.removeChild(element.firstChild);
				}
			}
		}
	}]);

	return Debug;
})();

exports["default"] = Debug;
module.exports = exports["default"];

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
